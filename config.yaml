# TIMING CONFIGURATION
timing:
    # If runintervalminutes != 0, certbutler keeps running
    # and checks for renewal every n minutes. 
    # Set this to 0 if you intend to call certbutler regularly
    # by other means, e.g. cron or systemd timer
    runintervalminutes: 360

    # renewalduecert specifies when to renew the cert in days
    # if this is set to 0, certbutler will not update the certificate
    renewalduecert: 14

    # Specifies when to renew the ocsp response in days
    # if this is set to 0, certbutler will not fetch OCSP responses
    renewaldueocsp: 3

# CERTIFICATE CONFIGURATION
certificate:
    # Make sure to have _acme-challenge NS DNS entry for all 
    # given domains pointed to this server
    dnsnames:
        - 'example.com'
        - '*.example.com'

    # If muststaple is true, you have to configure your web server accordingly
    # to send ocsp responses. 
    muststaple: false

    # acmedirectory specifies the letsencrypt endpoint that is queried to issue certificates.
    # This is staging which does not issue trusted certificates, but has more relaxed rate 
    # limits so you can test everything before going into production (this is what certbot's 
    # dry run implicitly does)
    # For production (real certificates):
    # acmedirectory: https://acme-v02.api.letsencrypt.org/directory
    acmedirectory: https://acme-staging-v02.api.letsencrypt.org/directory

    # acmeaccountfile specifies the file storing the key pair used as identity against the
    # acme server. If registeracme is set to true, a new identity will be created and 
    # registered if the file does not exists or its content cannot be used for any reason
    # (e.g. content not parsabe as key; key not registered with chosen acme server).
    acmeaccountfile: "/etc/certbutler/acmeKey.pem"
    registeracme: false

# OUTPUT FILES CONFIGURATION
files:
    # If singlefile is set to true, certificate and key will be stored in one pem file
    # (as needed for e.g. haproxy). Keyfile is ignored in this case.
    # Otherwise certificate and key will be stored in two  files (as needed for e.g. nginx)
    singlefile: false
    certfile: "example.com.pem"
    keyfile: "example.com.key"

# POST-PROCESSOR CONFIGURATIONS

# HAPROXY UPDATES
# Remove or leave empty to disable haproxy updates 
# haproxy:
#    haproxysocket: "/run/haproxy/admin.sock"

# NGINX RELOAD
# Remove or set false to disable nginx updates 
# nginx:
#     reloadnginx: false

# DEPLOYHOOK EXECUTION
# Remove or leave empty to disable deploy hook execution 
# deployhook:
#    executable: ""
